services:
  # This is the service used to make authenticated requests to mpx.
  media_mpx.authenticated_client_factory:
    class: Drupal\media_mpx\AuthenticatedClientFactory
    arguments: ['@media_mpx.client', '@media_mpx.user_session_factory']

  media_mpx.data_object_factory_creator:
    class: Drupal\media_mpx\DataObjectFactoryCreator
    arguments: ['@media_mpx.data_service_manager', '@media_mpx.authenticated_client_factory', '@media_mpx.metadata_cache_pool_adapter']

  media_mpx.data_service_manager:
    class: Lullabot\Mpx\DataService\DataServiceManager
    public: false
    factory: ['Lullabot\Mpx\DataService\DataServiceManager', 'basicDiscovery']
    arguments: ['@media_mpx.custom_field_manager']

  media_mpx.user_session_factory:
    class: Drupal\media_mpx\UserSessionFactory
    arguments: ['@media_mpx.client', '@media_mpx.session_lock', '@media_mpx.token_cache_pool']

  media_mpx.data_object_importer:
    class: Drupal\media_mpx\DataObjectImporter
    arguments: ['@entity_type.manager', '@event_dispatcher', '@cache.media_mpx_http']

  media_mpx.notification_listener:
    class: Drupal\media_mpx\NotificationListener
    arguments: ['@media_mpx.authenticated_client_factory', '@media_mpx.data_service_manager', '@state', '@logger.channel.media_mpx']

  logger.channel.media_mpx:
    parent: logger.channel_base
    arguments: ['media_mpx']

  media_mpx.exception_logger:
    class: Drupal\media_mpx\MpxLogger
    arguments: ['@logger.channel.media_mpx']

  # Discovers custom field classes in all enabled modules
  media_mpx.custom_field_discovery:
    class: Drupal\media_mpx\CustomFieldDiscovery
    arguments: ['@container.namespaces']

  media_mpx.custom_field_manager:
    class: Lullabot\Mpx\DataService\CustomFieldManager
    arguments: ['@media_mpx.custom_field_discovery']

  # We need to define our own handler stack instance separate from Drupal
  # core's. Otherwise, when we add the mpx_errors handler, it gets applied to
  # all HTTP requests, and not just those sent to mpx.
  media_mpx.http_handler_stack:
    class: GuzzleHttp\HandlerStack
    public: false
    factory: GuzzleHttp\HandlerStack::create
    configurator: ['@http_handler_stack_configurator', configure]
  media_mpx.http_handler_stack_configurator:
    class: Drupal\Core\Http\HandlerStackConfigurator
    public: false
    arguments: ['@service_container']

  # This service is a generic client handling both authenticated and anonymous
  # requests. Most code will want to use media_mpx.authenticated_client_factory
  # instead.
  media_mpx.client:
    class: Lullabot\Mpx\Client
    factory: media_mpx.client_factory:fromOptions

  media_mpx.client_factory:
    class: Drupal\media_mpx\ClientFactory
    arguments: ['@media_mpx.http_handler_stack', '@http_client_factory', '@cache.media_mpx_http']

  cache.media_mpx_http:
    class: Drupal\Core\Cache\CacheBackendInterface
    tags:
      - { name: cache.bin }
    factory: cache_factory:get
    arguments: [media_mpx_http]

  # These services are "internal" and generally not needed by custom code.
  media_mpx.session_lock:
    class: Lullabot\DrupalSymfonyLock\DrupalStore
    public: false
    arguments: ['@lock']

  # The mpx-php library implements PSR-6, but there is only a PSR-16 cache
  # adapter for Drupal. We use Symfony to bridge PSR-16 to PSR-6.
  media_mpx.simple_cache_backend:
    class: HighWire\DrupalPSR16\Cache
    public: false
    arguments: ['@cache.default']

  media_mpx.token_cache_pool_adapter:
    class: Symfony\Component\Cache\Adapter\SimpleCacheAdapter
    public: false
    arguments: ['@media_mpx.simple_cache_backend', 'media_mpx_token']

  media_mpx.metadata_cache_pool_adapter:
    class: Symfony\Component\Cache\Adapter\SimpleCacheAdapter
    public: false
    arguments: ['@media_mpx.simple_cache_backend', 'media_mpx_metadata']

  media_mpx.token_cache_pool:
    class: Lullabot\Mpx\TokenCachePool
    public: false
    arguments: ['@media_mpx.token_cache_pool_adapter']
